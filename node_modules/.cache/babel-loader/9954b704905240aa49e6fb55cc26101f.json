{"ast":null,"code":"import _slicedToArray from\"/home/kaif/Documents/salman/projects/app2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function About(){var _useState=useState({color:'black',backgroundColor:'white'}),_useState2=_slicedToArray(_useState,2),mystyle=_useState2[0],setmystyle=_useState2[1];var _useState3=useState(\"Enable Dark Mode\"),_useState4=_slicedToArray(_useState3,2),tglbtn=_useState4[0],settglbtn=_useState4[1];var setdark=function setdark(){if(mystyle.color==='black'){setmystyle({color:'white',backgroundColor:'black'});settglbtn(\"Disable Dark Mode\");}else{setmystyle({color:'black',backgroundColor:'white'});settglbtn(\"Enable Dark Mode\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container my-5\",style:mystyle,children:[/*#__PURE__*/_jsxs(\"div\",{class:\"accordion\",id:\"accordionExample\",children:[/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",id:\"headingOne mt-3\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",children:\"Accordion Item #1\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",class:\"accordion-collapse collapse show\",\"aria-labelledby\":\"headingOne\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",id:\"headingTwo\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",children:\"Accordion Item #2\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",class:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingTwo\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",id:\"headingThree\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseThree\",children:\"Accordion Item #3\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",class:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingThree\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary my-3\",onClick:setdark,children:tglbtn})]});}","map":{"version":3,"sources":["/home/kaif/Documents/salman/projects/app2/src/components/About.js"],"names":["React","useState","About","color","backgroundColor","mystyle","setmystyle","tglbtn","settglbtn","setdark"],"mappings":"+HAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,C,wFAEA,cAAe,SAASC,CAAAA,KAAT,EAAiB,CAC5B,cAA8BD,QAAQ,CAClC,CACIE,KAAK,CAAC,OADV,CAEIC,eAAe,CAAC,OAFpB,CADkC,CAAtC,wCAAOC,OAAP,eAAgBC,UAAhB,eAMA,eAA4BL,QAAQ,CAAC,kBAAD,CAApC,yCAAOM,MAAP,eAAeC,SAAf,eACA,GAAIC,CAAAA,OAAO,CAAC,QAARA,CAAAA,OAAQ,EAAI,CACZ,GAAGJ,OAAO,CAACF,KAAR,GAAgB,OAAnB,CACA,CACKG,UAAU,CACH,CACIH,KAAK,CAAC,OADV,CAEIC,eAAe,CAAC,OAFpB,CADG,CAAV,CAQGI,SAAS,CAAC,mBAAD,CAAT,CACP,CAXD,IAYI,CAEIF,UAAU,CACN,CACIH,KAAK,CAAC,OADV,CAEIC,eAAe,CAAC,OAFpB,CADM,CAAV,CAMAI,SAAS,CAAC,kBAAD,CAAT,CACP,CACJ,CAvBD,CAwBF,mBACE,aAAK,SAAS,CAAC,gBAAf,CAAgC,KAAK,CAAEH,OAAvC,wBACE,aAAK,KAAK,CAAC,WAAX,CAAuB,EAAE,CAAC,kBAA1B,wBACE,aAAK,KAAK,CAAC,gBAAX,wBACE,WAAI,KAAK,CAAC,kBAAV,CAA6B,EAAE,CAAC,iBAAhC,uBACE,eACE,KAAK,CAAC,kBADR,CAEE,IAAI,CAAC,QAFP,CAGE,iBAAe,UAHjB,CAIE,iBAAe,cAJjB,CAKE,gBAAc,MALhB,CAME,gBAAc,aANhB,+BADF,EADF,cAaE,YACE,EAAE,CAAC,aADL,CAEE,KAAK,CAAC,kCAFR,CAGE,kBAAgB,YAHlB,CAIE,iBAAe,mBAJjB,uBAME,aAAK,KAAK,CAAC,gBAAX,wBACE,oEADF,2XAOmC,yCAPnC,kDANF,EAbF,GADF,cAgCE,aAAK,KAAK,CAAC,gBAAX,wBACE,WAAI,KAAK,CAAC,kBAAV,CAA6B,EAAE,CAAC,YAAhC,uBACE,eACE,KAAK,CAAC,4BADR,CAEE,IAAI,CAAC,QAFP,CAGE,iBAAe,UAHjB,CAIE,iBAAe,cAJjB,CAKE,gBAAc,OALhB,CAME,gBAAc,aANhB,+BADF,EADF,cAaE,YACE,EAAE,CAAC,aADL,CAEE,KAAK,CAAC,6BAFR,CAGE,kBAAgB,YAHlB,CAIE,iBAAe,mBAJjB,uBAME,aAAK,KAAK,CAAC,gBAAX,wBACE,qEADF,4XAOmC,yCAPnC,kDANF,EAbF,GAhCF,cA+DE,aAAK,KAAK,CAAC,gBAAX,wBACE,WAAI,KAAK,CAAC,kBAAV,CAA6B,EAAE,CAAC,cAAhC,uBACE,eACE,KAAK,CAAC,4BADR,CAEE,IAAI,CAAC,QAFP,CAGE,iBAAe,UAHjB,CAIE,iBAAe,gBAJjB,CAKE,gBAAc,OALhB,CAME,gBAAc,eANhB,+BADF,EADF,cAaE,YACE,EAAE,CAAC,eADL,CAEE,KAAK,CAAC,6BAFR,CAGE,kBAAgB,cAHlB,CAIE,iBAAe,mBAJjB,uBAME,aAAK,KAAK,CAAC,gBAAX,wBACE,oEADF,4XAOmC,yCAPnC,kDANF,EAbF,GA/DF,GADF,cAgGE,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,sBAAhC,CAAuD,OAAO,CAAEI,OAAhE,UAA0EF,MAA1E,EAhGF,GADF,CAoGD","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function About() {\n    const [mystyle, setmystyle] = useState(\n        {\n            color:'black',\n            backgroundColor:'white'\n        }\n    )\n    const [tglbtn, settglbtn] = useState(\"Enable Dark Mode\")\n    let setdark=()=>{\n        if(mystyle.color==='black')\n        {      \n             setmystyle(\n                    {\n                        color:'white',\n                        backgroundColor:'black'\n                    }\n        )\n            \n                \n                settglbtn(\"Disable Dark Mode\")\n        }\n        else{\n            \n                setmystyle(\n                    {\n                        color:'black',\n                        backgroundColor:'white'\n                    }\n                )\n                settglbtn(\"Enable Dark Mode\")\n        }\n    }\n  return (\n    <div className=\"container my-5\" style={mystyle}>\n      <div class=\"accordion\" id=\"accordionExample\">\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\" id=\"headingOne mt-3\">\n            <button\n              class=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            class=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div class=\"accordion-body\">\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\" id=\"headingTwo\">\n            <button\n              class=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            class=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div class=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\" id=\"headingThree\">\n            <button\n              class=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            class=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div class=\"accordion-body\">\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <button type=\"button\" className=\"btn btn-primary my-3\" onClick={setdark}>{tglbtn}</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}